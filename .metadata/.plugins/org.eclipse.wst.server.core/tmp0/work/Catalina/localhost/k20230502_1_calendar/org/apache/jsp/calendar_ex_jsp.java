/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.74
 * Generated at: 2023-05-01 11:07:05 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import com.tjoeun.myCalendar.MyCalendar;
import java.util.Date;

public final class calendar_ex_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("com.tjoeun.myCalendar.MyCalendar");
    _jspx_imports_classes.add("java.util.Date");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>만년 달력</title>\r\n");
      out.write("\r\n");
      out.write("<style type=\"text/css\">\r\n");
      out.write("	tr {\r\n");
      out.write("		height: 70px;\r\n");
      out.write("	}\r\n");
      out.write("	th {\r\n");
      out.write("		font-size: 16pt;\r\n");
      out.write("		width: 100px;\r\n");
      out.write("	}\r\n");
      out.write("	th#title {\r\n");
      out.write("		font-size: 20pt;\r\n");
      out.write("		font-family: D2coding;\r\n");
      out.write("		font-weight: bold;\r\n");
      out.write("		color: purple;\r\n");
      out.write("	}\r\n");
      out.write("	th#saturday{\r\n");
      out.write("		color: blue;\r\n");
      out.write("	}\r\n");
      out.write("	th#sunday{\r\n");
      out.write("		color: red;\r\n");
      out.write("	}\r\n");
      out.write("	td {\r\n");
      out.write("		text-align: right;\r\n");
      out.write("		vertical-align: top;\r\n");
      out.write("	}\r\n");
      out.write("	td.sun {\r\n");
      out.write("		color: red;\r\n");
      out.write("	}\r\n");
      out.write("	td.sat {\r\n");
      out.write("		color: blue;\r\n");
      out.write("	}\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("</style>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\r\n");

	
	Date date = new Date();
	int year = date.getYear() + 1900;
	int month = date.getMonth() +1;
	
	try{
	year =Integer.parseInt(request.getParameter("year"));
	month =Integer.parseInt(request.getParameter("month"));
		if(month ==0){
			year-= 1;
			month =12;
		} else if(month ==13){
			year +=1;
			month =1;
		}
	}
	catch(NumberFormatException e) {
		
	}

      out.write("\r\n");
      out.write("\r\n");
      out.write("<table width=\"700\" border=\"1\" align=\"center\" cellpadding=\"5\" cellspacing=\"0\">\r\n");
      out.write("	<tr>\r\n");
      out.write("		<th>\r\n");
      out.write("			<a href=\"?year=");
      out.print(year);
      out.write("&month=");
      out.print(month-1);
      out.write("\">이전달</a>\r\n");
      out.write("		</th>\r\n");
      out.write("		<th id=\"title\" colspan=\"5\">\r\n");
      out.write("			");
      out.print(year);
      out.write('년');
      out.write(' ');
      out.print(month);
      out.write("월\r\n");
      out.write("		</th>\r\n");
      out.write("		<th>\r\n");
      out.write("			<a href=\"?year=");
      out.print(year);
      out.write("&month=");
      out.print(month+1);
      out.write("\">이전달</a>\r\n");
      out.write("		</th>\r\n");
      out.write("	</tr>\r\n");
      out.write("	\r\n");
      out.write("	<tr>\r\n");
      out.write("		<th id=\"sunday\">일</th>\r\n");
      out.write("		<th>월</th>\r\n");
      out.write("		<th>화</th>\r\n");
      out.write("		<th>수</th>\r\n");
      out.write("		<th>목</th>\r\n");
      out.write("		<th>금</th>\r\n");
      out.write("		<th id=\"saturday\">토</th>\r\n");
      out.write("	</tr>\r\n");
      out.write("	\r\n");
      out.write("	<tr>\r\n");


	int last = MyCalendar.lastDay(year, month);

	for(int i=1; i<=MyCalendar.weekDay(year, month, 1); i++){
		out.println("<td></td>");
	}

	for(int i=1; i<=MyCalendar.lastDay(year, month); i++){
		
		switch(MyCalendar.weekDay(year, month, i)) {
		case 0:
			out.println("<td class='sun'>" + i + "</td>");
			break;
		case 6: 
			out.println("<td class='sat'>" + i + "</td>");
			if(MyCalendar.weekDay(year, month, i)==6 && i==MyCalendar.lastDay(year, month)){
				
			} else {
			out.println("<tr></tr>");
			}
			break;
		default:
			out.println("<td>" + i + "</td>");
				break;
		}
	}
	
	for(int i=1; i<=6-MyCalendar.weekDay(year, month, last); i++){
		out.println("<td></td>");
	}
	

      out.write("\r\n");
      out.write("	</tr>\r\n");
      out.write("	\r\n");
      out.write("	\r\n");
      out.write("</table>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
