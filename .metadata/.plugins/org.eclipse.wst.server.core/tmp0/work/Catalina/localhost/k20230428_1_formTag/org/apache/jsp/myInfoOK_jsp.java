/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.74
 * Generated at: 2023-04-28 06:17:20 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.util.Arrays;

public final class myInfoOK_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("java.util.Arrays");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\r\n");
      out.write("myInfoOK.jsp 입니다.<br>\r\n");

//	form에 입력된 한글 데이터가 post 방식으로 전송될 때 깨지는 현상을 방지한다.
//	한글 깨짐을 방지하려면 최초의 request.getParameter() 메소드가 실행되기 전(맨처음)에 아래의 내용을
//	코딩하면 된다.
	request.setCharacterEncoding("UTF-8");
//	get 방식도 한글이 깨졌었었다. => tomcat server 7.0부터 get 방식은 한글이 깨지지 않는다.
//	get 방식에서 한글이 깨지면 서버 환경 설정에서 한글이 깨지지 않도록 설정해야 한다.
//	Servers 폴더의 server.xml 파일을 열고 Connector 태그에 URLEncoding="UTF-8" 속성을 추가하면 된다.
//	서버에 추가하기 때문에 프로젝트를 생성할 때마다 설정할 필요가 없고 이클립스를 다시 세팅할 때
//	하면 된다.


// 	request.getParameter() 메소드로 이전 페이지에서 submit 버튼이 클릭되면 넘어오는 데이터를 받는다.	
//	이전 페이지에서 넘어오는 데이터는 무조건 문자열 형태로 넘어온다.	
	String name = request.getParameter("name");
	out.println(name + "님 안녕하세요<br>");
	String id = request.getParameter("id");
	out.println(name + "님의 id는 " + id + "입니다.<br>");
	String password = request.getParameter("password");
	out.println(name + "님의 비밀번호는 " + password + "입니다.<br>");
	try {
		int age = Integer.parseInt(request.getParameter("age"));
		out.println(name + "님은 올해 " + age + "살 입니다.<br>");
		out.println(name + "님은 내년에 " + (age + 1) + "살 입니다.<br>");
	
	} catch(NumberFormatException e) {
		out.println("잘못된 나이가 입력되었습니다.<br>");
		out.println("<script>");
		out.println("alert('잘못된 나이가 입력되었습니다.')");
		out.println("</script>");
	}
	Boolean gender =Boolean.parseBoolean(request.getParameter("gender"));
	out.println(name + "님은 " + (gender ? "남자" : "여자") + " 입니다.<br>");
	
//	checkbox는 여러 항목을 선택할 수 있는데 아래와 같이 request.getParameter() 메소드를 이용해
//	넘어오는 데이터를 받으면 맨 처음 선택한 값 1개만 받을 수 있다.
//	데이터가 여러 개 넘어오는 경우 request.getParameter() 메소드를 사용하지 않는다.
//	String hobbies = request.getParameter("hobbies");
//	out.println(name + "님의 취미는 " + hobbies + "입니다.<br>");

// checkbox에서 넘어오는 데이터를 받을 때 넘어오는 항목이 여러 개일 수 있기 때문에 getParameterValues()
// 메소드로 받아서 배열에 저장해야 한다.
	String[] hobbies = request.getParameterValues("hobbies");
	out.println(name + "님의 취미는 " + hobbies + "입니다.<br>");
	out.println(name + "님의 취미는 " + Arrays.toString(hobbies) + "입니다.<br>");
	out.println(name + "님의 취미는 ");
	try{
		
	for(int i=0; i<hobbies.length; i++){
		out.println(hobbies[i] + "");
	}
	out.println("입니다.<br>");
	} catch(NullPointerException e){
		out.println("없습니다.<br>");
	}
	
	String trip = request.getParameter("trip");
	out.println(name + "님은 " + trip + "에 가고 싶어합니다.<br>");
	
	String[] travel = request.getParameterValues("travel");
	out.println(name + "님은 " + travel + "에 가고 싶어합니다.<br>");
	out.println(name + "님은 " + Arrays.toString(travel) + "에 가고 싶어합니다.<br>");
	out.println(name + "님은 ");
	try{
		
	for(int i=0; i<travel.length; i++){
		out.println(travel[i] + "");
	}
	out.println("에 가고 싶어합니다.<br>");
	} catch(NullPointerException e){
		out.println("가고 싶은 곳이 없습니다.<br>");
	}

	String content = request.getParameter("content");
//	태그 사용 가능, 줄바꿈 불가능
	out.println(content + "<br>");
//	태그 사용 불가능, 줄바꿈 불가능
	out.println(content.replace("<", "&lt;").replace(">", "&gt;") + "<br>");
//	태그 사용 가능, 줄바꿈 가능
	out.println(content.replace("\r\n", "<br>") + "<br>");
//	태그 사용 불가능, 줄바꿈 가능
	out.println(content.replace("<", "&lt;").replace(">", "&gt;").replace("\r\n", "<br>") + "<br>");
	

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
